---
type: update
id: mongodb-replica-set-auto-cluster
name: MongoDB Replica Set
description: Auto-Clustering for MongoDB Replica Set 

targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: nosqldb

globals: 
  pswd: ${fn.password(10)}
 
onInstall:
  - if (${settings.clone:false}): 
    - reconfigure
    - resetPassword
  - else:
    - configure
    - uploadKey: nosqldb
    - init

onAfterScaleOut[nosqldb]: 
  - uploadKey: ${event.response.nodes.join(id,)}
  - add: ${event.response.nodes.join(id,)}
  - setAdminAppPswd: ${event.response.nodes.join(id,)}

onBeforeScaleIn[nosqldb]: 
  stepDown: ${event.response.nodes.join(id,)}

onAfterScaleIn[nosqldb]: 
  remove: ${event.response.nodes.join(id,)}

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}    
    settings: 
      nodeGroup: ${settings.nodeGroup}      
      clone: true  

onBeforeResetServicePassword[nosqldb]:
  - log: ======================================================
  - log: ${placeholders}
  - if ("${event.params.nodeGroup:}"): 
    - setGlobals: 
        pswd: ${fn.password(10)}
    - forEach(nodes.nosqldb):    
      - env.control.ResetServicePassword:
          nodeId: ${@i.id}
          password: ${globals.pswd}
      - log: --------------------
      - log: ${placeholders}
    - stopEvent

_onBeforeResetServicePassword[nosqldb]:
  - resetPassword
  - message.email.Send:
      to: ${user.email}
      subject: MongoDB Credentials
      body: ${globals.pswd} 
  - stopEvent

actions:
  configure:
    - env.control.AddContainerEnvVars[nosqldb]:
        vars: {"KEY_PASS":"${fn.password}"}
    - cmd[nosqldb]: jcm changePassword ${globals.pswd}
    
  uploadKey:
    - cmd[${nodes.nosqldb.master.id}]: jcm getKey
    - cmd[${this}]: |-
        jcm uploadKey '${response.out}'
        jcm adjustConf
      user: root

  setAdminAppPswd: 
    - cmd[${nodes.nosqldb.master.id}]: jcm getAdminAppPswd
    - cmd[${this}]: jcm setAdminAppPswd '${response.out}' true

  init: 
    - sleep: 3000
    - cmd[${nodes.nosqldb.master.id}]: jcm initCluster ${nodes.nosqldb.join(id,)}
    - cmd[nosqldb]: jcm restartAdminApp

  add:
    - cmd[${nodes.nosqldb.master.id}]: jcm addMember ${this}
    - if (response.out.indexOf("COMPLETED") == -1):     
        cmd[${response.out}]: jcm addMember ${this}

  remove:
    - cmd[${nodes.nosqldb.master.id}]: jcm removeMember ${this}
    - if (response.out.indexOf("COMPLETED") == -1):     
        cmd[${response.out}]: jcm removeMember ${this}

  stepDown:
    cmd[${this}]: jcm stepDown
    sync: true

  reconfigure: 
    cmd[nosqldb]: jcm afterClone ${nodes.nosqldb.join(id,)}  
  
  resetPassword:
    - setGlobals: 
        pswd: ${fn.password(10)}
    - cmd[${nodes.nosqldb.master.id}]: jcm execOnPrimary changePassword ${globals.pswd}
    - if (response.out.indexOf("COMPLETED") == -1):     
        cmd[${response.out}]: jcm execOnPrimary changePassword ${globals.pswd}
    - cmd[nosqldb]: jcm setAdminAppPswd ${globals.pswd}
  
  
success: |   
  **Admin Panel**: [${nodes.nosqldb.master.url}](${nodes.nosqldb.master.url})  
  **User**: admin  
  **Password**: ${globals.pswd}

  * [Connection to MongoDB](http://docs.jelastic.com/connection-to-mongodb)
  * [MongoDB Replication Overview](https://docs.mongodb.com/manual/replication/)
  
